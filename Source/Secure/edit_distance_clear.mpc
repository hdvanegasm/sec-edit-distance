import mpc_math


program.use_edabit(True)


def compute_comp_matrix(A, B):
    M_comp = Matrix(len(A), len(B), sint)
    @for_range_opt(len(A))
    def _(i):
        @for_range_opt(len(B))
        def _(j):
            M_comp[i][j] = (A[i] != B[j])

    return M_comp


def edit_distance(A, B):
    D = Matrix(len(A) + 1, len(B) + 1, sint)
    D.assign_all(0)

    T = compute_comp_matrix(A, B)

    @for_range_opt(len(A) + 1)
    def _(i):
        D[i][0] = i


    @for_range_opt(len(B) + 1)
    def _(j):
        D[0][j] = j

    @for_range(1, len(A) + 1)
    def _(i):
        @for_range(1, len(B) + 1)
        def _(j):

            D[i][j] = (D[i - 1][j] + 1).min(
                D[i][j - 1] + 1
            ).min(
                D[i - 1][j - 1] + T[i - 1][j - 1]
            )
    
    return D[len(A)][len(B)]


def read_strings(A_length, B_length):
    A = Array(A_length, sint)
    B = Array(B_length, cint)
    B.assign_all(1)

    for i in range(A_length):
        A[i] = sint.get_input_from(0)

    return A, B

A_length = int(program.args[1])
B_length = int(program.args[2])
A, B = read_strings(A_length, B_length)
dist = edit_distance(A, B)
print_ln("Edit distance = %s", dist.reveal())
