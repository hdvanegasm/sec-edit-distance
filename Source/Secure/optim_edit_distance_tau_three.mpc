from Compiler import util

program.use_edabit(True)
sb = sbits.get_type(1)

def xor_nucleotids(N1, N2):
    xor = Array(2, sb)
    xor[0] = N1[0] ^ N2[0]
    xor[1] = N1[1] ^ N2[1]
    return xor


def or_nucleotid(N):
    return N[0].bit_or(N[1])


def equal_nucleotids(N1, N2):
    return or_nucleotid(xor_nucleotids(N1, N2)).bit_not()


def compute_comp_matrix(A, B):
    M_comp = Matrix(len(A), len(B), sb)
    @for_range_opt(len(A))
    def _(i):
        @for_range_opt(len(B))
        def _(j):
            comp = equal_nucleotids(A[i], B[j]).bit_not()
            M_comp[i][j] = comp

    return M_comp


def edit_distance(A, B):
    T_bits = compute_comp_matrix(A, B)
    T = Matrix(len(T_bits), len(T_bits[0]), sint)

    @for_range_opt(len(T_bits))
    def _(i):
        @for_range_opt(len(T_bits[0]))
        def _(j):
            T[i][j] = sint(T_bits[i][j])
    
    D = Matrix(len(A) + 1, len(B) + 1, sint)
    D.assign_all(0)

    @for_range_opt(len(A) + 1)
    def _(i):
        D[i][0] = i

    @for_range_opt(len(B) + 1)
    def _(j):
        D[0][j] = j

    @for_range_opt(3, len(A) + 1, 3)
    def _(i):
        @for_range_opt(3, len(B) + 1, 3)
        def _(j):
            terms_i_j = [
                D[i-3][j-0] + 3,
                D[i-3][j-1] + T[i-2-1][j-0-1] + 2,
                D[i-3][j-1] + T[i-1-1][j-0-1] + 2,
                D[i-3][j-1] + T[i-0-1][j-0-1] + 2,
                D[i-3][j-2] + T[i-2-1][j-1-1] + T[i-1-1][j-0-1] + 1,
                D[i-3][j-2] + T[i-2-1][j-1-1] + T[i-0-1][j-0-1] + 1,
                D[i-3][j-2] + T[i-1-1][j-1-1] + T[i-0-1][j-0-1] + 1,
                D[i-3][j-3] + T[i-2-1][j-2-1] + T[i-1-1][j-1-1] + T[i-0-1][j-0-1] + 0,
                D[i-0][j-3] + 3,
                D[i-1][j-3] + T[i-0-1][j-2-1] + 2,
                D[i-1][j-3] + T[i-0-1][j-1-1] + 2,
                D[i-1][j-3] + T[i-0-1][j-0-1] + 2,
                D[i-2][j-3] + T[i-1-1][j-2-1] + T[i-0-1][j-1-1] + 1,
                D[i-2][j-3] + T[i-1-1][j-2-1] + T[i-0-1][j-0-1] + 1,
                D[i-2][j-3] + T[i-1-1][j-1-1] + T[i-0-1][j-0-1] + 1 ,
            ]

            terms_i_j_2 = [
                D[i-3][j-2] + 3,
                D[i-3][j-3] + T[i-2-1][j-2-1] + 2,
                D[i-0][j-3] + 1,
                D[i-1][j-3] + T[i-0-1][j-2-1] + 0,
                D[i-2][j-3] + T[i-1-1][j-2-1] + 1,
            ]

            terms_i_j_1 = [
                D[i-3][j-1] + 3,
                D[i-3][j-2] + T[i-2-1][j-1-1] + 2,
                D[i-3][j-2] + T[i-1-1][j-1-1] + 2,
                D[i-3][j-2] + T[i-0-1][j-1-1] + 2,
                D[i-3][j-3] + T[i-2-1][j-2-1] + T[i-1-1][j-1-1] + 1,
                D[i-3][j-3] + T[i-2-1][j-2-1] + T[i-0-1][j-1-1] + 1,
                D[i-0][j-3] + 2,
                D[i-1][j-3] + T[i-0-1][j-2-1] + 1,
                D[i-1][j-3] + T[i-0-1][j-1-1] + 1,
                D[i-2][j-3] + T[i-1-1][j-2-1] + T[i-0-1][j-1-1] + 0,
            ]
            
            terms_i_2_j = [
                D[i-3][j-0] + 1,
                D[i-3][j-1] + T[i-2-1][j-0-1] + 0,
                D[i-3][j-2] + T[i-2-1][j-1-1] + 1,
                D[i-3][j-3] + T[i-2-1][j-2-1] + 2,
                D[i-2][j-3] + 3,
            ]

            terms_i_1_j = [
                D[i-3][j-0] + 2,
                D[i-3][j-1] + T[i-2-1][j-0-1] + 1,
                D[i-3][j-1] + T[i-1-1][j-0-1] + 1,
                D[i-3][j-2] + T[i-2-1][j-1-1] + T[i-1-1][j-0-1] + 0,
                D[i-3][j-3] + T[i-2-1][j-2-1] + T[i-1-1][j-1-1] + 1,
                D[i-3][j-3] + T[i-2-1][j-2-1] + T[i-1-1][j-0-1] + 1,
                D[i-1][j-3] + 3,
                D[i-2][j-3] + T[i-1-1][j-2-1] + 2,
                D[i-2][j-3] + T[i-1-1][j-1-1] + 2,
                D[i-2][j-3] + T[i-1-1][j-0-1] + 2,
            ]

            D[i - 2][j] = util.min(terms_i_2_j)
            D[i - 1][j] = util.min(terms_i_1_j)

            D[i][j - 2] = util.min(terms_i_j_2)
            D[i][j - 1] = util.min(terms_i_j_1)

            D[i][j] = util.min(terms_i_j)
                
    return D[len(A)][len(B)]


def read_strings(A_length, B_length):
    A = Matrix(A_length, 2, sb)
    B = Matrix(B_length, 2, sb)

    for i in range(A_length):
        A[i][0] = sb.get_input_from(0)
        A[i][1] = sb.get_input_from(0)
    for j in range(B_length):
        B[j][0] = sb.get_input_from(1)
        B[j][1] = sb.get_input_from(1)

    return A, B


A_length = int(program.args[1])
B_length = int(program.args[2])
A, B = read_strings(A_length, B_length)
d = edit_distance(A, B)
print_ln("Edit distance = %s", d.reveal())
